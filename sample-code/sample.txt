///////////////////
// 画像で返事をする //
///////////////////
var messages = ["左上を押した", "右上を押した", "左下を押した", "右下を押した"];
if (message_text == "猫") {
   sendMessage.send(req, [ messageTemplate.imagemapMessage(messages, 'https://i.imgur.com/8cbL5dl.jpg') ]);
   return;
} else if (message_text == "犬") {
   sendMessage.send(req, [ messageTemplate.imagemapMessage(messages, 'https://i.imgur.com/ph82KWH.jpg') ]);
   return;
} else if (message_text == "鹿") {
   sendMessage.send(req, [ messageTemplate.imagemapMessage(messages, 'https://i.imgur.com/Z6ilhSI.jpg') ]);
   return;
}



//////////////////
// 天気APIパート //
/////////////////

var weather_api = require('./openWeatherMap.js'); // 天気APIを使う時に必要

// 天気ときたら東京の天気が返ってくる
// APIキーの設定と、ライブラリの読み込みが必要
if (message_text === "天気") {
  weather_api.weather(function (result) {
    sendMessage.send(req, [ messageTemplate.textMessage(result) ]);
    return;
  });
// 天気　半角スペース　地名（ローマ字のみ　例：tokyo）でそこの天気が返ってくる
} else if (message_text.includes('天気')) {
  const words = message_text.split(' ')
  weather_api.weatherWithPlace(words[1], function (result) {
    sendMessage.send(req, [ messageTemplate.textMessage(result) ]);
    return;
  });
} else {
  sendMessage.send(req, [ messageTemplate.textMessage(message) ]);
  return;
}



//////////////////
// 画像認識パート //
/////////////////

var visualRecognition = require('./IBMImageRecognition.js'); // 画像認識AIを使う時に必要

if (message_type === 'image') {

  // https://qiita.com/n0bisuke/items/17c795fea4c2b5571ce0
  // 上のLINE Developersドキュメントのコードだとうまくいかない。
  // chunkにresponseとbodyが一緒に入っている？
  // encoding: nullが設定されてないから？
  const options = {
    url: `https://api.line.me/v2/bot/message/${message_id}/content`,
    method: 'get',
    headers: {
        'Authorization': 'Bearer ' + process.env.LINE_CHANNEL_ACCESS_TOKEN,
    },
    encoding: null
  };

  request(options, function(error, response, body) {
    if (!error && response.statusCode == 200) {
      console.log('Got responce');
      visualRecognition.classify(body, function (result) {
        sendMessage.send(req, [ messageTemplate.textMessage(result) ]);
        return;
      })
    } else {
      // @todo handle error
    }
  });
}
